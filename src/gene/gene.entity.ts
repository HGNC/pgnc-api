import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    CreateDateColumn,
    ManyToOne,
    UpdateDateColumn,
    DeleteDateColumn,
    OneToMany,
    JoinColumn,
} from 'typeorm';
import { geneStatus } from './enum/gene-status.enum';
import { User } from 'src/user/user.entity';
import { Species } from 'src/species/species.entity';
// import { GeneHistory } from 'src/gene-history/gene-history.entity';
import { GeneSymbol } from 'src/gene-symbol/gene-symbol.entity';
import { GeneName } from 'src/gene-name/gene-name.entity';
import { GeneLocusType } from 'src/gene-locus-type/gene-locus-type.entity';
import { GeneNote } from 'src/gene-note/gene-note.entity';
import { GeneReplacement } from 'src/gene-replacement/gene-replacement.entity';
import { GeneXref } from 'src/gene-xref/gene-xref.entity';
import { GeneLocation } from 'src/gene-location/gene-location.entity';

/**
 * Gene entity class to store gene related information.
 */
@Entity()
export class Gene {
    /**
     * Unique identifier of the gene. Auto-incremented by the database on insert.
     * @type {number}
     */
    @PrimaryGeneratedColumn()
    id: number;

    /**
     * Gene name of the gene.
     * @type {Species}
     */
    @ManyToOne(() => Species, (species) => species.genes, {
        eager: true,
        nullable: false,
    })
    @JoinColumn({ name: 'taxon_id' })
    species: Species;

    /**
     * The person who first created the gene entry
     * @type {User}
     */
    @ManyToOne(() => User, (user) => user.genesCreated)
    creator: User;

    /**
     * Date when the gene entry was created. Auto-generated by the database on insert.
     * @type {Date}
     */
    @CreateDateColumn()
    creationDate: Date;

    /**
     * The person who last edited the gene entry.
     * @type {User}
     */
    @ManyToOne(() => User, (user) => user.genesEdited)
    editor: User;

    /**
     * Date when the gene entry was last modified. Auto-generated by the database on update.
     * @type {Date}
     */
    @UpdateDateColumn()
    modDate: Date;

    /**
     * The date the gene was soft deleted - status should therefore be withdrawn.
     * @type {Date}
     */
    @DeleteDateColumn()
    withdrawnDate: Date;

    /**
     * The status of the gene. Default is internal and must be changed
     * to public before the gene can be viewed by the public. The value
     * is one of the geneStatus enum values.
     * @type {geneStatus}
     */
    @Column({
        type: 'enum',
        enum: geneStatus,
        nullable: false,
        default: geneStatus.INTERNAL,
    })
    status: string;

    /**
     * The primary ID of the gene. This is the main identifier of the gene publically.
     * @type {string}
     */
    @Column({
        type: 'varchar',
        length: 16,
        nullable: true,
    })
    primaryId: string;

    /**
     * The source of the primary ID of the gene.
     * @type {string}
     */
    @Column({
        type: 'varchar',
        length: 50,
        nullable: true,
    })
    primaryIdSource: string;

    // @OneToMany(() => GeneHistory, (geneHistory) => geneHistory.gene)
    // geneHistories: GeneHistory[];
    /**
     * Modifications to the gene entry are recorded in this table.
     * @type {GeneHistory}
     */
    /**
     * Gene symbols of the gene. A gene can have multiple gene symbols but only one is approved
     * @type {GeneSymbol}
     */
    @OneToMany(() => GeneSymbol, (geneSymbol) => geneSymbol.gene, {
        eager: true,
    })
    geneSymbols: GeneSymbol[];

    /**
     * Gene names of the gene. A gene can have multiple gene names but only one is approved
     * @type {GeneName}
     */
    @OneToMany(() => GeneName, (geneName) => geneName.gene, { eager: true })
    geneNames: GeneName[];

    @OneToMany(() => GeneLocusType, (geneLocusType) => geneLocusType.gene, {
        eager: true,
    })
    geneLocusTypes: GeneLocusType[];

    @OneToMany(() => GeneNote, (geneNote) => geneNote.gene, { eager: true })
    geneNotes: GeneNote[];

    @OneToMany(
        () => GeneReplacement,
        (geneReplacement) => geneReplacement.previousGene,
        { eager: true },
    )
    geneReplacements: GeneReplacement[];

    @OneToMany(
        () => GeneReplacement,
        (geneReplacement) => geneReplacement.replacementGene,
        { eager: true },
    )
    genesReplaced: GeneReplacement[];

    @OneToMany(() => GeneXref, (geneXref) => geneXref.gene, { eager: true })
    geneXrefs: GeneXref[];

    @OneToMany(() => GeneLocation, (geneLocation) => geneLocation.gene, {
        eager: true,
    })
    geneLocations: GeneLocation[];
}
